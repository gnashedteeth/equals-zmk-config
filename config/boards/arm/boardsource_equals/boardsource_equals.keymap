/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define EQUALS60 1

#define BOTTOM_ORTHO   1
// #define BOTTOM_MIT     1

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

// define mod-tap tapping term
&mt { tapping-term-ms = <150>; };

/ {
    chosen {
       zmk,matrix_transform =
#if defined(EQUALS60)

#if defined(BOTTOM_MIT)
                       &mit60_transform;
#else
                       &ortho60_transform;
#endif

#else // !defined(EQUALS60)

#if defined(BOTTOM_MIT)
                       &mit48_transform;
#else
                       &ortho48_transform;
#endif

#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef EQUALS60
 &kp ESC    &kp N1     &kp N2     &kp N3      &kp N4         &kp N5         &kp N6           &kp N7         &kp N8      &kp N9     &kp N0        &kp BKSP
#endif

#ifdef QWERTY_BASE
 &kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &mt LCTRL ESC    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp SLASH     &mt RSHIFT RET
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
#endif
#if defined(BOTTOM_MIT)
 &kp LCTRL  &mo SYM_L   &kp LGUI  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
#else
 &trans  &trans   &kp RWIN  &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE          &mo NUM_L      &kp LCTRL    &kt CAPS     &trans      &trans
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
#ifdef EQUALS60
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &trans
#endif

 &kp GRAVE  &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp N7      &kp N8   &kp N9    &kp P         &kp BKSP
 &trans     &kp F1     &kp F2     &kp F3      &kp F4         &kp F5         &kp F6           &kp N4      &kp N5   &kp N6    &kp SEMI      &kp QUOT
 &mt LSHIFT DEL    &kp F7     &kp F8     &kp F9      &kp F10        &kp F11        &kp F12          &kp N1      &kp N2   &kp N3    &kp FSLH      &mt RET RSHIFT
#if defined(BOTTOM_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans   &kp RWIN  &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE          &mo NUM_L      &kp N0    &kt CAPS     &trans      &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
#ifdef EQUALS60
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &trans
#endif

&kp TILDE2 &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp AMPS       &kp STAR    &kp EQUAL  &kp MINUS     &kp BKSP
 &kp ESC    &kp LBKT   &kp RBKT   &kp LPAR    &kp RPAR       &kp G          &kp H            &kp DLLR       &kp PRCNT   &kp CARET  &kp BSLH      &kp PIPE2
 &mt LSHIFT DEL    &kp LBRC   &kp RBRC   &kp C       &kp V          &kp B          &kp N            &kp EXCL       &kp AT      &kp HASH   &kp FSLH      &mt RET RSHIFT
#if defined(BOTTOM_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans  &trans   &kp RWIN  &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE          &mo NUM_L      &kp LCTRL    &kt CAPS     &trans      &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
#ifdef EQUALS60
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &trans
#endif

&trans &kp LBRC      &kp LS(N7)   &kp LS(N8)    &kp LS(N9)     &kp RBRC     &trans       &trans      &trans       &trans         &trans        &kp PSCRN
&mt LCTRL ESC    &kp COLON     &kp C_VOL_UP &kp C_VOL_DN  &kp C_MUTE     &kp PLUS     &trans       &kp LEFT    &kp UP       &kp DOWN       &kp RIGHT     &trans
&trans     &trans  &trans &trans  &trans   &trans &trans &kp HOME    &kp PG_UP    &kp PG_DN      &kp END       &trans
#if defined(BOTTOM_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&bootloader  &sys_reset   &kp RWIN  &kp LALT    &mo NAV_L      &kp SPACE      &kp SPACE          &mo NUM_L      &kp LCTRL    &kt CAPS     &trans      &trans
#endif
            >;
        };


    };
};
